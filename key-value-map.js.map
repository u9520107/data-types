{"version":3,"sources":["key-value-map.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAsCgB,Q,GAAA,Q;QASA,M,GAAA,M;;;;AA/ChB,IAAM,iBAAiB,GAAG,cAA1B;AACA,IAAM,aAAa,uBAAnB;AACA,IAAM,WAAW,uBAAjB;;AAEA;;;;;IAIqB,W;AACnB;;;;AAIA,qBAAY,UAAZ,EAAwB;AAAA;;AAAA;;AACtB,OAAK,UAAL,IAAmB,sBAAc,EAAd,EAAkB,UAAlB,CAAnB;AACA,OAAK,QAAL,IAAiB,mBAAjB;;AAFsB,6BAIX,GAJW;AAKpB;AACA,QAAI,eAAe,IAAf,CAAoB,UAApB,EAAgC,GAAhC,CAAJ,EAA0C;AACxC,2CAA4B,GAA5B,EAAiC;AAC/B,WAD+B,iBACzB;AACJ,iBAAO,KAAK,UAAL,EAAiB,GAAjB,CAAP;AACD,SAH8B;;AAI/B,oBAAY;AAJmB,OAAjC;AAMA,YAAK,QAAL,EAAe,GAAf,CAAmB,MAAK,UAAL,EAAiB,GAAjB,CAAnB,EAA0C,GAA1C;AACD;AAdmB;;AAItB,OAAK,IAAM,GAAX,IAAkB,UAAlB,EAA8B;AAAA,UAAnB,GAAmB;AAW7B;AACD,wBAAc,IAAd;AACD,C;AAEH;;;;;;;;kBAxBqB,W;AA8Bd,SAAS,QAAT,CAAkB,KAAlB,EAAyB;AAC9B,SAAO,KAAK,QAAL,EAAe,GAAf,CAAmB,KAAnB,CAAP;AACD;AACD;;;;;;AAMO,SAAS,MAAT,CAAgB,KAAhB,EAAuB;AAC5B,SAAO,KAAK,QAAL,EAAe,GAAf,CAAmB,KAAnB,CAAP;AACD","file":"key-value-map.js","sourcesContent":["const hasOwnProperty = {}.hasOwnProperty;\nconst DEFINITION = Symbol();\nconst VALUEMAP = Symbol();\n\n/**\n * @class KeyValueMap\n * @description Simple key-value map class\n */\nexport default class KeyValueMap {\n  /**\n   * @constructor\n   * @param {Object} definition\n   */\n  constructor(definition) {\n    this[DEFINITION] = Object.assign({}, definition);\n    this[VALUEMAP] = new Map();\n\n    for (const key in definition) {\n      /* istanbul ignore else */\n      if (hasOwnProperty.call(definition, key)) {\n        Object.defineProperty(this, key, {\n          get() {\n            return this[DEFINITION][key];\n          },\n          enumerable: true,\n        });\n        this[VALUEMAP].set(this[DEFINITION][key], key);\n      }\n    }\n    Object.freeze(this);\n  }\n}\n/**\n * @function hasValue\n * @param {any} value\n * @return {Boolean}\n * @description Determines if the value set of the key-value map contains the value\n */\nexport function hasValue(value) {\n  return this[VALUEMAP].has(value);\n}\n/**\n * @function getKey\n * @param {any} value\n * @return {String}\n * @description Returns the key of the values passed for the enum\n */\nexport function getKey(value) {\n  return this[VALUEMAP].get(value);\n}\n"],"sourceRoot":"/source/"}